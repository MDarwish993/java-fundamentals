/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {

    //roll Method #1
    public int[] roll(int n) {
        if (n <= 0 || n>6) {
            return new int[0];
        }

        int[] rolls = new int[n];
        Random random = new Random();

        for (int i = 0; i < n; i++) {
            rolls[i] = random.nextInt(6) + 1;
        }

        return rolls;
    }

    //isContainsDuplicates Method #2
    public boolean isContainsDuplicates(int[] array){
        ArrayList<Integer> elements = new ArrayList<>();

        for (int num : array) {
            if (elements.contains(num)) {
                return true;
            }
            elements.add(num);
        }

        return false;
    }

    //arrayAverage Method #3
    public double arrayAverage(int[] array) {
        if (array.length == 0) {
            return 0;
        }

        int sum = 0;
        for (int num : array) {
            sum += num;
        }

        return (double) sum / array.length;
    }
    //lowestArrayAverage Method #4
    public int[] lowestArrayAverage(int[][] arrays) {
        double lowestAverage=arrayAverage(arrays[0]);
        int[] lowestAvgArr=null;
        for(int[]element : arrays) {
            if(arrayAverage(element)<lowestAverage) {
                lowestAverage=arrayAverage(element);
                lowestAvgArr=element;
            }
        }
        return lowestAvgArr;
    }


    //===========================lab03Solution======================
    //Method#1 weatherData Lab03
    public String weatherData(int[][] data) {
        HashSet<Integer> uniqueTemperatures = new HashSet<>();
        int minTemp = Integer.MAX_VALUE;
        int maxTemp = Integer.MIN_VALUE;


        for (int[] weekTemperatures : data) {
            for (int temperature : weekTemperatures) {
                uniqueTemperatures.add(temperature);
                minTemp = Math.min(minTemp, temperature);
                maxTemp = Math.max(maxTemp, temperature);
            }
        }

        StringBuilder missingTemps = new StringBuilder();
        for (int temp = minTemp; temp <= maxTemp; temp++) {
            if (!uniqueTemperatures.contains(temp)) {
                missingTemps.append("Never saw temperature: ").append(temp).append("\n");
            }
        }

        return "High: " + maxTemp + "\nLow: " + minTemp + "\n" + missingTemps.toString();
    }

    //Method#2 weatherData Lab03
    public String tally(List<String> votes) {
        Map<String, Integer> voteCount = new HashMap<>();

        // Count the votes
        for (String vote : votes) {
            voteCount.put(vote, voteCount.getOrDefault(vote, 0) + 1);
        }

        // Find the winner
        String winner = "";
        int maxVotes = 0;
        for (Map.Entry<String, Integer> entry : voteCount.entrySet()) {
            if (entry.getValue() > maxVotes) {
                maxVotes = entry.getValue();
                winner = entry.getKey();
            }
        }

        return winner;
    }



}
